 ###################################
 ## packages
 ###################################
# require(car)
 
 ##################################
 ## examples
 ##################################
# y = arGEV(5000, -1, p.ar, 1, .3); plot(y, type ='l')
# T = length(y)
# p = 3 
 
 #########################################################
 ## inverse log-gamma density for 
 ## theta = log sig or phi1 or phi2 using jacobian method
 ######################################################### 
 digam <- function(x, a, b) {
          b^a / gamma(a) * exp(-x*a - b/exp(x))        
 }
 a = 0.1; b = 0.01
 curve(digam(x, a, b), -10, 50)
 
 psd = 5
 psd2 = psd^2
 
 ###############################
 ### log-posterior for GEV-AR(3)
 ###############################
 ll <- function(theta, x) {
       mu    = theta[1]
       thet1 = theta[2]
       thet2 = theta[3]
       thet3 = theta[4]
       delta = theta[5]
       xi    = theta[6]
       
       T = length(x)
  
       mut = vector() 
       for (t in 4:T) mut[t-3] = sum(theta[2:4] * x[(t-1):(t-3)])     
       
       ll <- sum(log(f(x[4:T], mu + mut, exp(delta), xi))) + 
             sum(dnorm(theta[1:4], 0, psd, log = TRUE)) + log(digam(delta, a, b)) + dunif(xi, -.4999, .4999, log = TRUE)  
       
 ifelse(ll != "-Inf", ll, -10000000000000000000)
 }
 
 #######################################
 ## gradient log-posterior for GEV-AR(3)
 #######################################
 nll <- function(theta, x) {
        mu    = theta[1]
        thet1 = theta[2]
        thet2 = theta[3]
        thet3 = theta[4]
        sig   = exp(theta[5])
        xi    = theta[6]
        
        T = length(x)
        
        mut = vector() 
        for (t in (4:T)) mut[t-3] = sum(theta[2:4] * x[(t-1):(t-3)])  
              
        d = x[4:T]-(mu + mut)
        z = 1 + xi*d/sig
        D = rep(0, 6)
        
        if (any(z < 0) | abs(xi) > .5) { D = rep(-10000000000000000000, 6)  }
        else {
           w = d/sig^2
           q = d/sig
       	   v = 1/sig*(z^(-1)*((1+xi) - z^(-1/xi)))
	   D[1] = sum(v) - mu/psd2
	   D[2] = sum(v * x[3:(T-1)]) - thet1/psd2
	   D[3] = sum(v * x[2:(T-2)]) - thet2/psd2
   	   D[4] = sum(v * x[1:(T-3)]) - thet3/psd2
	   D[5] = (sum((1+xi)*w*z^(-1) - w*z^(-1-1/xi))*sig - (T-3)) - a + b/sig 
           D[6] = suppressWarnings(1/xi^(2)*sum(log(z)) - (1/xi+1)*sum(q*z^(-1)) + 1/xi*sum(q*z^(-1-1/xi)) - 1/xi^(2)*sum(log(z)*z^(-1/xi)))
         }
         
 if (suppressWarnings(any(D == "NaN" | D == "Inf" | D == "-Inf"))) rep(-10000000000000000000, 6)
 else D
 }
 
 
 ##############################################
 ### maximum a posteriori
 ##############################################
# map = optim(c(0, 0, 0, 0, 1, 0.1), ll, x = y, control = list(fnscale = -1, maxit = 10000), hessian = TRUE)
# map = optim(c(0, -1, .-5, 0, 1, 0.2), ll, nll, x = y, control = list(fnscale = -1, maxit = 10000), method = 'BFGS', hessian = TRUE)
 
 ################################################
 ### Fisher information matrix, riemannian metric
 ################################################
 G = function(theta, x) {
     G = matrix(, 6, 6)
     mu    = theta[1]
     thet1 = theta[2]
     thet2 = theta[3]
     thet3 = theta[4]
     sig   = exp(theta[5])
     sig2  = sig^2
     xi    = theta[6]
     
     T = length(x)
     E = acf(x, type = 'cov', plot = FALSE)[[1]]
     
     Sthet = 1-sum(theta[2:4])
     mean.e = -sig/xi + sig/xi * gamma(1-xi)
     mean.y = (mean.e + mu)/Sthet
      
     Ey0 = E[1] + mean.y^2
     Ey1 = E[2] + mean.y^2
     Ey2 = E[3] + mean.y^2
          
     pg = gamma(2 + xi)
     p  = (1 + xi)^(2) * gamma(1 + 2*xi)
     q  = pg * (psigamma(1 + xi) + 1 + 1/xi)
  
     G[1, 1] =  (T-3)*p/sig2 + 1/psd2
     G[1, 2] =  (T-3)*p/sig2 * mean.y     -> G[2, 1]
     G[1, 3] =  (T-3)*p/sig2 * mean.y     -> G[3, 1]
     G[1, 4] =  (T-3)*p/sig2 * mean.y     -> G[4, 1]
     G[1, 5] = -(T-3)/(sig*xi)*(p - pg)   -> G[5, 1]
     G[1, 6] = -(T-3)/(sig*xi)*(q - p/xi) -> G[6, 1]
     
     G[2, 2] =  (T-3)*p/sig2 * Ey0 + 1/psd2
     G[2, 3] =  (T-3)*p/sig2 * Ey1                 -> G[3, 2]
     G[2, 4] =  (T-3)*p/sig2 * Ey2                 -> G[4, 2]
     G[2, 5] = -(T-3)/(sig*xi)*(p - pg) * mean.y   -> G[5, 2]
     G[2, 6] = -(T-3)/(sig*xi)*(q - p/xi) * mean.y -> G[6, 2]
     
     G[3, 3] =  (T-3)*p/sig2 * Ey0 + 1/psd2
     G[3, 4] =  (T-3)*p/sig2 * Ey1                 -> G[4, 3]
     G[3, 5] = -(T-3)/(sig*xi)*(p - pg) * mean.y   -> G[5, 3]
     G[3, 6] = -(T-3)/(sig*xi)*(q - p/xi) * mean.y -> G[6, 3]
     
     G[4, 4] =  (T-3)*p/sig2 * Ey0 + 1/psd2                
     G[4, 5] = -(T-3)/(sig*xi)*(p - pg) * mean.y   -> G[5, 4]
     G[4, 6] = -(T-3)/(sig*xi)*(q - p/xi) * mean.y -> G[6, 4]
     
     G[5, 5] =  (T-3)/(xi^2) * (1 - 2*pg + p) + b/sig
     G[5, 6] = -(T-3)/(xi^2) * (1 - J + (1 - pg)/xi - q + p/xi) -> G[6, 5]
          
     G[6, 6] =  (T-3)/(xi^2) * ((pi^2)/6 + (1 - J + 1/xi)^2 - 2*q/xi + p/(xi^2))
 
 return(G)
 }
  
# G. = G(map$par, y) 
# invG = solve(G.) 
# 
# ##############################
# ### Hamiltonian Monte Carlo
# ##############################
# B = hmc(c(0, 0, 0, 0, 1, .1), 600, 10, 1, .007, 13, diag(6), y) 
# B = hmc(c(0, 0, 0, 0, 1, .1), 600, 10, 1, .155, 13, G., y) 

# par(mfrow=c(3,2)); for (i in 1:6) plot(B$theta[, i], type = 'l')
#	 
# scatterplotMatrix(B$theta, diagonal = 'histogram', nclass = 30, col = c(0, 1, 1), reg.lin = F ,smoother = F, var.labels = rep('', 6), upper.panel = NULL)


