 ###############################################################
 ## Source files
 ## put here the directory of the file hmc.txt in your computer
 ## also for basic function files
 ##############################################################
 source("hmc.txt")
 source("basicfunctions.txt")
 
 #####################################################
 ## generalized extreme value time series 
 ## an example of first order autoregressive GEV model 
 #####################################################
 data = scan('')
 m.data = mean(data[1:91])
 y = data[1:93] - m.data
 T = length(y)

 #########################
 ### simulate time series
 #########################
 # T = 96; y = rep(0, T); y[1] = 2.123; theta = 0.851
 # for(t in 2:T) { y[t] = theta*y[t-1] + rgev(1, 0, .686, -.352) }
 # plot(y, type = 'l')
 # plot(y[1:(T-1)], y[2:T])

 ##########################################
 ### inverse log-gamma density for 
 ### delta = log sig using jacobian method
 ######################################### 
 digam <- function(x, a, b) {
          b^a / gamma(a) * exp(-x*a - b/exp(x))        
 }
 a = 1; b = 0.0001
 
 ###############################
 ### log-posterior for GEV-AR(1)
 ###############################
 ll <- function(theta, x) {
       mu    = theta[1]
       delta = theta[2]
       xi    = theta[3]
       ll <- sum(log(f(x[2:T], x[1:(T-1)]*mu, exp(delta), xi))) + sum(dnorm(c(mu, xi), 0, 5, log = T)) + log(digam(delta, a, b))  
       ifelse(ll != "-Inf", ll, -10^5)
 }
 
 #######################################
 ## gradient log-posterior for GEV-AR(1)
 #######################################
 nll <- function(theta, x) {
        mu    = theta[1]
        delta = theta[2]
        xi    = theta[3]
        sig = exp(delta)

	      d = x[2:T]-mu*x[1:(T-1)]
	      z = 1 + xi*d/sig
	      w = d/sig^2
	      q = d/sig

	      D = rep(0, 3)
        D[1] = 1/sig*sum(z^(-1)*((1+xi) - z^(-1/xi))*x[1:(T-1)]) - mu/25
        D[2]= ( sum((1+xi)*w*z^(-1) - w*z^(-1-1/xi))*sig - (T-1) ) - a + b/exp(delta) 
        D[3] = suppressWarnings(1/xi^(2)*sum(log(z)) - (1/xi+1)*sum(q*z^(-1)) + 
                               1/xi*sum(q*z^(-1-1/xi)) - 1/xi^(2)*sum(log(z)*z^(-1/xi)) - xi/25)
  
 if (suppressWarnings(any(z < 0 | D == "NaN" | D == "Inf" | D == "-Inf"))) c(-10^4, -10^4, -10^4)
 else D
 }
 
 # Generating values
 B = hmc(c(0, 5, 0.0001), 1100, 100, .01, 15, y)
